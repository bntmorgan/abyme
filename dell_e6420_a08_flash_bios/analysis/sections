Passage en mode protégé
-----------------------
:section	0xfffffff0:0xfffffff4	CODE16
:section	0xffffff40:0xffffff6a	CODE16
:section	0xffffffb8:0xffffffbd	GDTR32
:section	0xffffff70:0xffffffb7	GDT32
Le bios commence par sauter à une routine permettant de passer en mode protégé.
La GDT est en mode FLAT pour chacun de ses descripteurs de segments.
A présent, le processeur est en mode protégé.

Fonction ``0xfffffe66``
-----------------------
:section	0xfffffe66:0xfffffe80	CODE32

Le controlleur mémoire du processeur est initialisé. Il est configurable à travers l'espace
PCI en utilisant les I/O. Son identifiant est : ``B0:D0:F0``. Pour obtenir ces informations,
il suffit d'appliquer les formules suivantes :
::

  address = 0x80000060
  B = (address - 0x80000000) >> 16
  D = ((address - 0x80000000) >> 11) & 31
  F = ((address - 0x80000000) >>  8) & 7
  register = (address - 0x80000000) & 255

Dans son espace de configuration,
le registre ``0x60`` correspond au ``PCIEXBAR``. L'espace MMIO est donc configuré pour être
adressé en ``0xf8000000``. Le ``4`` signifie que seulement ``64Mo`` seront adressables, ce qui est
cohérent avec les composants dans le portable et ce qui évite les gaspillage de mémoire.
Le pseudo-code est le suivant :
::

  io(0xcf8) = 0x80000060
  io(0xcfc) = 0x4
  io(0xcfc) = io(0xcfc) | 0xf8000001

Ces informantions sont disponibles dans le document :

  Mobile 3rd Generation Intel CoreTM Processor Family, Mobile Intel
  Pentium Processor Family, and Mobile Intel Celeron Processor Family

------------

:section	0xfffffe81:0xfffffe93	CODE32

L'espace ``0xf80f80f0`` correspond au composant ``B0:D0:F0``. Pour obtenir cette information,
il suffit d'appliquer les formules suivantes :
::

  address = 0xf80f80f0
  PCIEXBAR = 0xf8000000
  R = address % 4096
  F = ((address - PCIEXBAR) / 4096) % 8
  D = ((address - PCIEXBAR) / (4096 * 8)) % 32
  B = ((address - PCIEXBAR) / (4096 * 8 * 32))

Ce composant correspond à l'interface avec le bus LPC (*LPC Interface Bridge Registers*).
Le registre ``0xf0`` est l'adresse du RCBA (*Root Complex Base Address*). Cette zone contient les
registres de configuration du chipset. Elle est à présent accessible à l'adresse ``0xfed1c000``.
L'offset ``0xfed1f410 - 0xfed1c000`` correspond au registre ``0x3410`` de cette zone, le GCS
(*General Control and Status*). En masquant ce registre avec ``0xfffffffb``, le bios positionne
à ``0`` le bit RPR : **TODO : mieux comprendre ce bit**

  Reserved Page Route (RPR) — R/W. Determines where to send the reserved page
  registers. These addresses are sent to PCI or LPC for the purpose of generating POST
  codes. The I/O addresses modified by this field are: 80h, 84h, 85h, 86h, 88h, 8Ch,
  8Dh, and 8Eh.

  0 = Writes will be forwarded to LPC, shadowed within the PCH, and reads will be
  returned from the internal shadow

  1 = Writes will be forwarded to PCI, shadowed within the PCH, and reads will be
  returned from the internal shadow.

  NOTE: if some writes are done to LPC/PCI to these I/O ranges, and then this bit is
  flipped, such that writes will now go to the other interface, the reads will not
  return what was last written. Shadowing is performed on each interface.
  The aliases for these registers, at 90h, 94h, 95h, 96h, 98h, 9Ch, 9Dh, and 9Eh, are
  always decoded to LPC.

Ces informantions sont disponibles dans le document :

  Intel 6 Series Chipset and Intel C200 Series Chipset

------------

:section	0xfffffe94:0xfffffe9a	CODE32

Le port ``0x80`` semble être utilisé comment port de diagnostic :

  I/O port 0x80 is traditionally used for POST Codes. (POST = Power On Self Test)

------------

:section	0xfffffe62:0xfffffe65	DATA32
:section	0xfffffe9b:0xfffffea4	CODE32

Les instructions aux adresses ``0xfffffe9b`` et ``0xfffffea0`` correspondent à un
``call``. Par contre, au lieu de laisser le processeur empiler l'adresse de retour,
cette dernière est définie statiquement à l'adresse `a0x`fffffe62``. Après
l'exécution de la routine à l'adresse ``0xfffffd8d`` l'exécution se poursuivra à
l'adresse ``*0xfffffe62 == 0xfffffea5``.

------------

:section	0xfffffea5:0xffffff12	CODE32

**TODO**

Fonction ``0xfffffd8d``
-----------------------
:section	0xfffffd8d:0xfffffe61	CODE32

:image	0xfffffd8d:0xfffffe61	GRAPH32	0xfffffd8d

**TODO**
