abyme-challenge/
  Le code des challenges envoyés depuis le périphérique de confiance vers
  l'hyperviseur. Celui-ci doit les exécuter pour prouver son intégrité.
  Code 100% LAAS.

abyme-debug/
  Client de débogage de l'hyperviseur et de ses machines virtuelles. Écrit en
  python. Code 100% LAAS.

abyme-linux/
  Application/modules/scripts utiles pour mettre en place nos preuves de
  concept. Contient notamment le driver de carte réseau Intel modifié, que l'on
  protège. Pour rappel l'hypperviseur de sécurité teste son intégrité dans
  l'environnement d'exécution sécurisé mis en place grâce à la chaine de
  confiance périphérique de confiance -> hyperviseur.
linux/tools/wireshark/dissector.lua
  Dissecteur lua pour wirehark de notre protocole de débogage de machine
  virtuelles.

sources/
  Code de l'hyperviseur de sécurité. Code 100 % LAAS.
sources/drivers/vmm_rec/
  Bibliothèque statique d'hyperviseur récursif.
sources/drivers/vmm_rec_env/
  Implémentation d'hyperviseur utilisant la bibliothèque précédente. CET
  HYPERVISEUR EST L'ENVIRONNEMENT D'EXECUTION SECURISÉ.
sources/drivers/82579LM/
  Driver de carte réseau générique Intel famille e1000.
sources/drivers/eric/
  Driver du périphérique de confiance.

edk2/
  Build and QEMU/OVMF firmware here if needed
